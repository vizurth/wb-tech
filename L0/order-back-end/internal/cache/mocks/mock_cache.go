// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cache/cache.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	model "order-back-end/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCache) Delete(orderUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", orderUID)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), orderUID)
}

// Get mocks base method.
func (m *MockCache) Get(orderUID string) (model.OrderInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", orderUID)
	ret0, _ := ret[0].(model.OrderInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), orderUID)
}

// Set mocks base method.
func (m *MockCache) Set(id string, o model.OrderInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", id, o)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(id, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), id, o)
}
