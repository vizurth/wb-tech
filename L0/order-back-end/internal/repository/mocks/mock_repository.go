// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	model "order-back-end/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockRepo) GetAllOrders(ctx context.Context) ([]model.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx)
	ret0, _ := ret[0].([]model.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockRepoMockRecorder) GetAllOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockRepo)(nil).GetAllOrders), ctx)
}

// GetOrderFromDB mocks base method.
func (m *MockRepo) GetOrderFromDB(ctx context.Context, orderID string) (*model.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderFromDB", ctx, orderID)
	ret0, _ := ret[0].(*model.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderFromDB indicates an expected call of GetOrderFromDB.
func (mr *MockRepoMockRecorder) GetOrderFromDB(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderFromDB", reflect.TypeOf((*MockRepo)(nil).GetOrderFromDB), ctx, orderID)
}
